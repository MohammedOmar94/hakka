{"version":3,"sources":["containers/Portal/Portal.module.scss","components/UI/NavBar/NavBar.module.scss","components/UI/Button/Button.module.scss","components/UI/Section/Section.module.scss","containers/MyQuizzes/MyQuizzes.module.scss","components/Questions/Questions.module.scss","components/Layout/Layout.module.scss","components/PortalLink/PortalLink.module.scss","components/UI/NavBar/NavBar.js","components/Layout/Layout.js","components/PortalLink/PortalLink.js","containers/Portal/Portal.js","components/Questions/Questions.js","components/UI/Button/Button.js","components/UI/Section/Section.js","containers/MyQuizzes/MyQuizzes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Portal","Slider","Slide","SlideCaption","ImageCaption","KirbySlide","WiggleSlide","MiyamotoApproveSlide","MiyamotoRejectSlide","NavBar","Hiragana","Button","ActiveBtn","Section","SectionHeader","Preferences","Questions","Question","QuestionNumber","AnswerField","EmptyAnswer","NextBtn","AnswerHistory","Answers","CorrectAnswer","WrongAnswer","Answer","Layout","PortalLink","withRouter","props","react_default","a","createElement","className","classes","onClick","history","push","layout","react","UI_NavBar_NavBar","children","portalLink","icon","label","href","lib_default","Object","assign","arrows","lazyLoad","infinite","speed","swipe","autoplay","autoplaySpeed","concat","Component","wanakana","require","questions","inputEl","useRef","inputMode","setTimeout","current","bind","IMEMode","question","questionIndex","endOfQuiz","answerHistory","map","index","key","text","usersAnswer","answerWasCorrect","onSubmit","event","next","id","answer","length","emptyAnswer","ref","type","name","autoFocus","autoComplete","placeholder","value","button","selected","section","MyQuizzes","state","score","months","sectionName","shuffle","array","i","j","Math","floor","random","_ref","handleNext","_this","target","answerField","toRomaji","toConsumableArray","correctAnswer","setState","prevState","preventDefault","setInputMode","this","_this2","App","react_router","path","exact","component","Boolean","window","location","hostname","match","app","react_router_dom","basename","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7eff38d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Portal\":\"Portal_Portal__12e22\",\"Slider\":\"Portal_Slider__3c_hP\",\"Slide\":\"Portal_Slide__DDgBl\",\"SlideCaption\":\"Portal_SlideCaption__1niW-\",\"ImageCaption\":\"Portal_ImageCaption__QyJlB\",\"KirbySlide\":\"Portal_KirbySlide__1ZUNI\",\"WiggleSlide\":\"Portal_WiggleSlide__p42MY\",\"MiyamotoApproveSlide\":\"Portal_MiyamotoApproveSlide__24Lef\",\"MiyamotoRejectSlide\":\"Portal_MiyamotoRejectSlide__3utjO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavBar\":\"NavBar_NavBar__1nlbe\",\"Hiragana\":\"NavBar_Hiragana__BN2nx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1q8mH\",\"ActiveBtn\":\"Button_ActiveBtn__OB75O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__7AyTM\",\"SectionHeader\":\"Section_SectionHeader__spjuW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Preferences\":\"MyQuizzes_Preferences__3h-12\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Questions\":\"Questions_Questions__2eqNU\",\"Question\":\"Questions_Question__3KKfj\",\"QuestionNumber\":\"Questions_QuestionNumber__36Tho\",\"AnswerField\":\"Questions_AnswerField__3TrNV\",\"EmptyAnswer\":\"Questions_EmptyAnswer__3AvGR\",\"NextBtn\":\"Questions_NextBtn__34mrB\",\"AnswerHistory\":\"Questions_AnswerHistory__NT6V4\",\"Answers\":\"Questions_Answers__3R1Hs\",\"CorrectAnswer\":\"Questions_CorrectAnswer__2fSjZ\",\"WrongAnswer\":\"Questions_WrongAnswer__3PVtt\",\"Answer\":\"Questions_Answer__2LZyY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__7kSfi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PortalLink\":\"PortalLink_PortalLink__2c1Eb\"};","import React from \"react\";\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport classes from \"./NavBar.module.scss\";\r\n\r\nconst NavBar = props => (\r\n  <header className={classes.NavBar}>\r\n    <h1 onClick={() => props.history.push('/')}>\r\n      <p className={classes.Hiragana}>しつもん</p>\r\n      shitsumon\r\n    </h1>\r\n  </header>\r\n);\r\n\r\nexport default withRouter(NavBar);\r\n","import React, { Fragment } from 'react';\r\nimport classes from './Layout.module.scss';\r\n\r\nimport NavBar from '../UI/NavBar/NavBar';\r\n\r\nconst layout = (props) => (\r\n  <Fragment>\r\n    <NavBar />\r\n    <main className={classes.Layout}>\r\n      {props.children}\r\n    </main>\r\n  </Fragment>\r\n);\r\n\r\nexport default layout;","import React from \"react\";\r\n\r\nimport classes from \"./PortalLink.module.scss\";\r\n\r\nconst portalLink = props => {\r\n  let icon;\r\n  switch (props.label) {\r\n    case \"Partner Up\":\r\n      icon = <i className=\"fas fa-user-friends\"></i>;\r\n      break;\r\n    case \"Games\":\r\n      icon = <i className=\"fas fa-gamepad\"></i>;\r\n      break;\r\n    case \"My Quizzes\":\r\n      icon = <i className=\"fas fa-pencil-alt\" />;\r\n      break;\r\n    case \"Profile\":\r\n      icon = <i className=\"fas fa-user-circle\"></i>\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return (\r\n    <a href={props.href} className={classes.PortalLink}>\r\n      { icon }\r\n      <p>{props.label}</p>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default portalLink;\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport classes from './Portal.module.scss';\r\nimport PortalLink from '../../components/PortalLink/PortalLink';\r\nimport Slider from \"react-slick\";\r\n\r\n\r\nclass Portal extends Component {\r\n  render() {\r\n    const settings = {\r\n      arrows: false,\r\n      lazyLoad: true,\r\n      // fade: true,\r\n      infinite: true,\r\n      speed: 500,\r\n      swipe: false,\r\n      autoplay: true,\r\n      autoplaySpeed: 4000,\r\n    };\r\n    return (\r\n      <Fragment>\r\n        <div className={classes.Portal}>\r\n          <PortalLink label='Partner Up' />\r\n          <PortalLink label='Games' />\r\n          <PortalLink href='/my-tests' label='My Quizzes' />\r\n          <PortalLink label='Profile' />\r\n        </div>\r\n\r\n        <Slider {...settings} className={classes.Slider}>\r\n          <Fragment>\r\n            <div className={classes.Slide}>\r\n              <p className={classes.SlideCaption}>So this is currently a placeholder.</p>\r\n            </div>\r\n          </Fragment>\r\n          <Fragment>\r\n            <div className={`${classes.Slide} ${classes.MiyamotoApproveSlide}`}>\r\n              <p className={classes.ImageCaption}>The idea of this site is to auto-generate Japanese questions with the words you currently know</p>\r\n            </div>\r\n          </Fragment>\r\n          <Fragment>\r\n            <div className={classes.Slide}>\r\n              <p className={classes.SlideCaption}>or based on general things like dates, times etc.</p>\r\n            </div>\r\n          </Fragment>\r\n          <Fragment>\r\n            <div className={`${classes.Slide} ${classes.MiyamotoRejectSlide}`}>\r\n              <p className={classes.ImageCaption}>...but we're still faaaaaar away from that.</p>\r\n            </div>\r\n          </Fragment>\r\n          <Fragment>\r\n            <div className={`${classes.Slide} ${classes.KirbySlide}`} >\r\n              <p className={classes.ImageCaption}>I know, we've betrayed you and Kirby.</p>\r\n            </div>\r\n          </Fragment>\r\n          <Fragment>\r\n            <div className={classes.Slide}>\r\n            <p className={classes.SlideCaption}>But don't worry</p>\r\n            </div>\r\n          </Fragment>\r\n          <Fragment>\r\n            <div className={`${classes.Slide} ${classes.WiggleSlide}`}>\r\n              <p className={classes.ImageCaption}>It will be worth the wait</p>\r\n            </div>\r\n          </Fragment>\r\n        </Slider>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Portal;","import React, { Fragment, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport classes from \"./Questions.module.scss\";\r\n\r\nconst wanakana = require('wanakana');\r\n\r\nconst questions = props => {\r\n  let inputEl = useRef(null);\r\n  if (props.inputMode !== 'Default') {\r\n    // Cheeky workaround for wanakana so the binding always works.\r\n    setTimeout(() => {\r\n      if (inputEl.current) {\r\n        wanakana.bind(inputEl.current, { IMEMode: props.inputMode });\r\n      }\r\n    }, 200);\r\n    }\r\n\r\n  const question = props.questions[props.questionIndex];\r\n\r\n  const resultMsg = (usersAnswer, answerWasCorrect) => {\r\n    if (answerWasCorrect) {\r\n      return (\r\n        <span className={classes.CorrectAnswer}>\r\n          {usersAnswer}\r\n          <i className={\"fas fa-check-circle \" + classes.CorrectAnswer}></i>\r\n        </span>\r\n      );\r\n    }\r\n    return (\r\n        <span className={classes.WrongAnswer}>\r\n          {usersAnswer}\r\n          <i className={\"fas fa-times-circle \" + classes.WrongAnswer}></i>\r\n        </span>\r\n    );\r\n  }\r\n\r\n  const submitHandler = (event) => props.next(event, question.id, question.answer);\r\n\r\n  if (!props.endOfQuiz) {\r\n    return (\r\n      <form className={classes.Questions} onSubmit={submitHandler}>\r\n        <h4 className={classes.QuestionNumber}>Question {props.questionIndex + 1} of {props.questions.length}</h4>\r\n        <section key={question.id} className={classes.Question}>\r\n          <p>{question.text}</p>\r\n          <input\r\n            key={props.inputMode}\r\n            className={props.emptyAnswer ? classes.EmptyAnswer : classes.AnswerField}\r\n            ref={inputEl}\r\n            type=\"text\"\r\n            name=\"answerField\"\r\n            autoFocus\r\n            autoComplete=\"off\"\r\n            placeholder=\"Type the Japanese word here\"\r\n            value={props.usersAnswer}\r\n          />\r\n        </section>\r\n        <input className={classes.NextBtn} type=\"submit\" />\r\n      </form>\r\n    );\r\n  } else {\r\n    return (\r\n      <form className={classes.Questions}>\r\n      { props.answerHistory.map((question, index) => (\r\n        <Fragment key={'answer-' + (index + 1)} >\r\n          <h4 className={classes.QuestionNumber}>Question {index + 1} - {question.text}</h4>\r\n          <section className={classes.AnswerHistory}>\r\n            <p className={classes.Answers}>You wrote {resultMsg(question.usersAnswer, question.answerWasCorrect)} </p>\r\n          </section>\r\n        </Fragment>\r\n      ))}\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nquestions.propTypes = {\r\n  questions: PropTypes.array.isRequired,\r\n  questionIndex: PropTypes.number.isRequired,\r\n  emptyAnswer: PropTypes.bool.isRequired,\r\n  inputMode: PropTypes.string.isRequired,\r\n  endOfQuiz: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default questions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classes from './Button.module.scss';\r\n\r\nconst button = props => (\r\n  <button className={props.selected ? classes.ActiveBtn : classes.Button } onClick={props.onClick}>{props.children}</button>\r\n)\r\n\r\nbutton.propTypes = {\r\n  selected: PropTypes.bool\r\n}\r\n\r\nexport default button;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classes from \"./Section.module.scss\";\r\n\r\nconst section = props => (\r\n  <section className={classes.Section}>\r\n    <h2 className={classes.SectionHeader}>{props.name}</h2>\r\n    {props.children}\r\n  </section>\r\n);\r\n\r\nsection.propTypes = {\r\n  name: PropTypes.string.isRequired\r\n};\r\n\r\nexport default section;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Questions from \"../../components/Questions/Questions\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Section from \"../../components/UI/Section/Section\";\r\nimport classes from \"./MyQuizzes.module.scss\";\r\n\r\nconst wanakana = require('wanakana');\r\n\r\n\r\nclass MyQuizzes extends Component {\r\n  state = {\r\n    score: 0,\r\n    questionIndex: 0,\r\n    months: [\r\n      { id: 1, text: \"January\", answer: \"ichigatsu\" },\r\n      { id: 2, text: \"Feburary\", answer: \"nigatsu\" },\r\n      { id: 3, text: \"March\", answer: \"sangatsu\" },\r\n      { id: 4, text: \"April\", answer: \"shigatsu\" },\r\n      { id: 5, text: \"May\", answer: \"gogatsu\" },\r\n      { id: 6, text: \"June\", answer: \"rokugatsu\" },\r\n      { id: 7, text: \"July\", answer: \"shichigatsu\"  },\r\n      { id: 8, text: \"August\", answer: \"hachigatsu\" },\r\n      { id: 9, text: \"September\", answer: \"kugatsu\" },\r\n      { id: 10, text: \"October\", answer: \"juugatsu\" },\r\n      { id: 11, text: \"November\", answer: \"juuichigatsu\" },\r\n      { id: 12, text: \"December\", answer: \"juunigatsu\" }\r\n    ],\r\n    emptyAnswer: false,\r\n    inputMode: 'toHiragana',\r\n    answerHistory: [],\r\n    endOfQuiz: false,\r\n    sectionName: '',\r\n  };\r\n\r\n  shuffle = array => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n  };\r\n\r\n  handleNext = (event) => {\r\n    const question = this.state.months[this.state.questionIndex];\r\n\r\n    const usersAnswer = event.target.answerField.value;\r\n    const answerWasCorrect = wanakana.toRomaji(usersAnswer) === wanakana.toRomaji(question.answer);\r\n    const answerHistory = [...this.state.answerHistory];\r\n\r\n    let score = this.state.score;\r\n    if (answerWasCorrect) {\r\n      score = score + 1;\r\n    }\r\n    answerHistory.push({ text: question.text, usersAnswer, correctAnswer: question.answer, answerWasCorrect })\r\n    if (this.state.questionIndex + 1 === this.state.months.length) {\r\n      this.setState({endOfQuiz: true, answerHistory, sectionName: 'Results'});\r\n    } else if (usersAnswer) {\r\n      this.setState(prevState => {\r\n        return {\r\n          questionIndex: prevState.questionIndex + 1,\r\n          score,\r\n          answerHistory\r\n         }\r\n      });\r\n    } else {\r\n      this.setState({emptyAnswer: true});\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  setInputMode = (inputMode) => {\r\n    this.setState({inputMode});\r\n  }\r\n\r\n  componentDidMount() {\r\n    const months = this.shuffle([...this.state.months]);\r\n    this.setState({ months, sectionName: 'Dates 年月日' });\r\n  }\r\n\r\n  render() {\r\n    let inputMode = null;\r\n    if (!this.state.endOfQuiz) {\r\n      inputMode = (\r\n        <div className={classes.Preferences}>\r\n          <p>Input mode</p>\r\n          <Button selected={this.state.inputMode === 'toHiragana'} onClick={() => this.setInputMode('toHiragana')}>Hiragana</Button>\r\n          <Button selected={this.state.inputMode === 'toKatakana'} onClick={() => this.setInputMode('toKatakana')}>Katakana</Button>\r\n          <Button selected={this.state.inputMode === 'Default'} onClick={() => this.setInputMode('Default')}>Romaji</Button>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <Section name={this.state.sectionName} className={classes.MyQuizzes}>\r\n      <Questions\r\n        questions={this.state.months}\r\n        questionIndex={this.state.questionIndex}\r\n        inputMode={this.state.inputMode}\r\n        next={(event) => this.handleNext(event) }\r\n        answerHistory={this.state.answerHistory}\r\n        emptyAnswer={this.state.emptyAnswer}\r\n        endOfQuiz={this.state.endOfQuiz} />\r\n        { inputMode }\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyQuizzes;\r\n","import React, { Component } from 'react';\n\nimport Layout from './components/Layout/Layout';\nimport Portal from './containers/Portal/Portal';\nimport MyQuizzes from './containers/MyQuizzes/MyQuizzes';\nimport { Route } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Route path=\"/\" exact component={Portal} />\n        <Route path=\"/my-tests/\" exact component={MyQuizzes} />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst app = (\r\n  <BrowserRouter basename='/'>\r\n    <App />\r\n  </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}